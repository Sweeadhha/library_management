package library;

import java.sql.*;
import java.util.Scanner;

public class test {
    private static final String URL = "jdbc:mysql://localhost:3306/db";
    private static final String USER = "root"; // Change if needed
    private static final String PASSWORD = "12345"; // Change if needed

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("\nLibrary Management System:");
            System.out.println("1. Add Book");
            System.out.println("2. Remove Book");
            System.out.println("3. Add Student");
            System.out.println("4. Issue Book");
            System.out.println("5. Return Book");
            System.out.println("6. View Available Books");
            System.out.println("7. Exit");
            System.out.print("Enter choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    addBook(scanner);
                    break;
                case 2:
                    removeBook(scanner);
                    break;
                case 3:
                    addStudent(scanner);
                    break;
                case 4:
                    issueBook(scanner);
                    break;
                case 5:
                    returnBook(scanner);
                    break;
                case 6:
                    viewAvailableBooks();
                    break;
                case 7:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }

    private static void addBook(Scanner scanner) {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            System.out.print("Enter book title: ");
            String title = scanner.nextLine();
            System.out.print("Enter author: ");
            String author = scanner.nextLine();

            String sql = "INSERT INTO books (title, author, available) VALUES (?, ?, TRUE)";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, title);
            stmt.setString(2, author);
            stmt.executeUpdate();
            System.out.println("Book added successfully!");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void removeBook(Scanner scanner) {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            System.out.print("Enter book ID to remove: ");
            int bookId = scanner.nextInt();

            String sql = "DELETE FROM books WHERE book_id = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setInt(1, bookId);
            int rowsAffected = stmt.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Book removed successfully!");
            } else {
                System.out.println("Book not found!");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void addStudent(Scanner scanner) {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            System.out.print("Enter student name: ");
            String name = scanner.nextLine();

            String sql = "INSERT INTO students (name) VALUES (?)";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, name);
            stmt.executeUpdate();
            System.out.println("Student added successfully!");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void issueBook(Scanner scanner) {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            System.out.print("Enter student ID: ");
            int studentId = scanner.nextInt();
            System.out.print("Enter book ID to issue: ");
            int bookId = scanner.nextInt();

            // Check if book is available
            String checkSql = "SELECT available FROM books WHERE book_id = ?";
            PreparedStatement checkStmt = conn.prepareStatement(checkSql);
            checkStmt.setInt(1, bookId);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next() && rs.getBoolean("available")) {
                // Issue the book
                String issueSql = "INSERT INTO book_rentals (book_id, student_id) VALUES (?, ?)";
                PreparedStatement issueStmt = conn.prepareStatement(issueSql);
                issueStmt.setInt(1, bookId);
                issueStmt.setInt(2, studentId);
                issueStmt.executeUpdate();

                // Mark book as unavailable
                String updateSql = "UPDATE books SET available = FALSE WHERE book_id = ?";
                PreparedStatement updateStmt = conn.prepareStatement(updateSql);
                updateStmt.setInt(1, bookId);
                updateStmt.executeUpdate();

                System.out.println("Book issued successfully!");
            } else {
                System.out.println("Book is not available!");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void returnBook(Scanner scanner) {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            System.out.print("Enter rental ID: ");
            int rentalId = scanner.nextInt();

            // Update the return date
            String returnSql = "UPDATE book_rentals SET return_date = NOW() WHERE rental_id = ?";
            PreparedStatement returnStmt = conn.prepareStatement(returnSql);
            returnStmt.setInt(1, rentalId);
            int rowsAffected = returnStmt.executeUpdate();

            if (rowsAffected > 0) {
                // Make the book available again
                String bookSql = "UPDATE books SET available = TRUE WHERE book_id = " +
                        "(SELECT book_id FROM book_rentals WHERE rental_id = ?)";
                PreparedStatement bookStmt = conn.prepareStatement(bookSql);
                bookStmt.setInt(1, rentalId);
                bookStmt.executeUpdate();

                System.out.println("Book returned successfully!");
            } else {
                System.out.println("Rental record not found!");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void viewAvailableBooks() {
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
            String sql = "SELECT * FROM books WHERE available = TRUE";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            System.out.println("\nAvailable Books:");
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("book_id") +
                        ", Title: " + rs.getString("title") +
                        ", Author: " + rs.getString("author"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}